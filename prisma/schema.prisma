// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  age       String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  farms    Farm[]
  receipts Receipt[]

  @@map("users")
}

model Farm {
  id         Int      @id @default(autoincrement())
  name       String
  startMonth String
  endMonth   String
  createAt   DateTime @default(now())
  updateAt   DateTime @updatedAt

  userId   Int
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  receipts Receipt[]

  @@map("farms")
}

model ExpenseCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  receiptItems ReceiptItem[]

  @@map("expense_categories")
}

model Receipt {
  id            Int      @id @default(autoincrement())
  receiptDate   DateTime
  shopName      String
  totalAmount   Float
  imageUrl      String?
  createdAt     DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  farmId Int
  farm   Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  items ReceiptItem[]

  @@map("receipts")
}

model ReceiptItem {
  id          Int      @id @default(autoincrement())
  description String
  amount      Float
  price       Float
  quantity    String
  createdAt   DateTime @default(now())

  receiptId Int
  receipt   Receipt @relation(fields: [receiptId], references: [id], onDelete: Cascade)

  categoryId Int
  category   ExpenseCategory @relation(fields: [categoryId], references: [id])

  @@map("receipt_items")
}
